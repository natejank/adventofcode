#!/usr/bin/env python3
# TODO:
#  autodetect which language was used for a given day
#  this project is not Y2K compatible :(
import argparse
import shutil
import sys
import subprocess
from pathlib import Path

BUILD_DIR = 'out'
COMPILE_FLAGS = ('-d', BUILD_DIR)
RUN_FLAGS = ('-classpath', BUILD_DIR)
JAVA_PACKAGE = 'net.sloshy.aoc'
JAVA_SOURCE_FOLDER = Path('src', 'java')
PYTHON_SOURCE_FOLDER = Path('src', 'python')
DEFAULT_LANGUAGE = 'JAVA'


def find_java_files(source_root=JAVA_SOURCE_FOLDER) -> list[Path]:
    """
    Finds all java files from a given root

    :param source_root: root of search, default src/java
    :return: all java files from a starting point

    See Also
    ---
    find_source_files
    """
    return find_source_files(source_root, '*.java')


def find_python_files(source_root=PYTHON_SOURCE_FOLDER):
    """
    Finds all python files from a given root

    :param source_root: root of search, default src/python
    :return: all java files from a starting point

    See Also
    ---
    find_source_files
    """
    return find_source_files(source_root, '*.py')


def find_source_files(source_root: Path, extension: str) -> list[Path]:
    """
    Recursively crawls filesystem from a root to find source files.

    :param extension:
    :param source_root: the root to crawl from
    :return: list of paths to java files, with source_root as the start of the path
    """
    paths = [source_root]
    files = []
    while len(paths) > 0:
        directory = paths.pop(0)
        for path in directory.iterdir():
            if path.is_dir() and path not in paths:
                paths.append(path)
        for file in directory.glob(extension):
            if file not in files:
                files.append(file)
    return files


def compile_java(*files: Path) -> bool:
    """
    Compiles java files given as arguments

    :param files: string paths to compile
    :return: true if the files compiled successfully
    """
    # convert path to string before compilation
    to_compile = [str(f) for f in files]
    outcome = subprocess.run(['javac', *COMPILE_FLAGS, *to_compile])
    return outcome.returncode == 0


def get_input_path(year: str, day: str, test: bool) -> Path:
    """
    Gets the path to the input file.  Input files are stored in
    lib/{year}/day{day}.input.txt, so this method returns a path to the input
    in that form.

    :param year: 2-digit year
    :param day: day to get
    :param test: whether to get the test input
    :return: path to a given day's input
    """
    return Path('lib', f'20{year}', f'day{day}{"_test" if test else ""}.input.txt')


def get_class(year: str, day: str) -> Path:
    """
    Gets a filesystem path to a java class.  This is useful for accessing
    compiled class files in the output directory

    :param year: year of class
    :param day: day of class
    :return: Path to class file
    """
    return Path(*JAVA_PACKAGE.split('.')).joinpath(f'x{year}').joinpath(f'Day{day}')


def get_python_file(year: str, day: str) -> Path:
    """
    Gets a filesystem path to a python executable.

    :param year: year of file
    :param day: day of file
    :return: path to executable
    """
    return PYTHON_SOURCE_FOLDER.joinpath(f'x{year}').joinpath(f'day{day}.py')


def clean_build_directory(build_dir=Path(BUILD_DIR), no_confirm=False) -> None:
    """
    Removes build directory contents, with user confirmation

    :param build_dir: directory to use
    :param no_confirm: Prompt user to delete directory?
    """
    can_remove = no_confirm
    if not can_remove:
        # be very careful we're not removing the wrong thing
        print(f'Ok to remove all subdirectories inside {str(build_dir)}?')
        print(f'Full path is {str(build_dir.absolute())}')
        can_remove = input('OK to remove? [y/N]: ') == 'y'

    if can_remove:
        shutil.rmtree(build_dir)
        build_dir.mkdir()
    else:
        print('Aborting.')


def run_java(year: str, day: str, input_file) -> None:
    """
    Runs java class for a given year and day

    :param year: year to run
    :param day: day to run
    :param input_file: input file to provide; Path or str
    """
    success = compile_java(*find_java_files())
    if success:
        path = get_class(year, day)
        subprocess.run(['java', *RUN_FLAGS, str(path), str(input_file)])
    else:
        print('Java compilation failed!')


def run_python(year: str, day: str, input_file) -> None:
    """
    Runs a python file for a given year and day

    :param year: year to run
    :param day: day to run
    :param input_file: input file to provide; path or str
    """
    path = get_python_file(year, day)
    subprocess.run([sys.executable, str(path), str(input_file)])


def java_template(year: str, day: str) -> None:
    """
    Templates a java source file for a given year and day.  The package for
    the year must already exist.

    :param year: year to create
    :param day: day to create
    """
    template = (
        f'package {JAVA_PACKAGE}.x{year};\n',
        '\n',
        'import java.util.*;\n',
        '\n',
        f'import {JAVA_PACKAGE}.common.Utilities;\n',
        '\n',
        f'public class Day{day} {{\n',
        '    public static void main(String[] args) {\n'
        '        \n'
        '    }\n'
        '}\n'
    )
    input_file = str(JAVA_SOURCE_FOLDER.joinpath(get_class(year, day)).with_suffix('.java'))

    with open(input_file, 'w') as handle:
        handle.writelines(template)


def truncate_year(year: str) -> str:
    """
    Ensure year is two-digit

    :param year: 2 or 4 digit year
    :return: 2 digit year
    """
    return year if len(year) != 4 else year[2:]


def main() -> None:
    # set up cli interface
    argument_parser = argparse.ArgumentParser(description='An advent of code build system ðŸŽ„')
    subparsers = argument_parser.add_subparsers(dest='directive')

    # clean
    clean_parser = subparsers.add_parser('clean', help='Remove build artifacts from build directory')
    clean_parser.add_argument('-y', '--yes', dest='clean_no_confirm', action='store_true',
                              help='Confirm deletion automatically')

    # build
    build_parser = subparsers.add_parser('compile', help='Compile source without running anything')
    # explicit language switches
    build_language_selection = build_parser.add_mutually_exclusive_group()
    build_language_selection.add_argument('-j', '--java', dest='language_selection', action='store_const',
                                          const='JAVA', help='Create java source')

    # create
    create_parser = subparsers.add_parser('create', help='Create input and source files for a given day')
    create_parser.add_argument('year', help='Year to run. Valid formats are 4 digit (2022) or 2 digit (22)')
    create_parser.add_argument('day', help='Day to run')
    create_language_selection = create_parser.add_mutually_exclusive_group()
    create_language_selection.add_argument('-j', '--java', dest='language_selection', action='store_const',
                                           const='JAVA', help='Create java source')

    # run
    run_parser = subparsers.add_parser('run', help='Compile (if needed) and run a given day')
    run_parser.add_argument('year', help='Year to run. Valid formats are 4 digit (2022) or 2 digit (22)')
    run_parser.add_argument('day', help='Day to run')
    run_parser.add_argument('--test', '-t', dest='use_test_input', action='store_true', help='Use the test input')
    run_parser.add_argument('--input', '-i', dest='input_file', help='Custom input file')
    run_language_selection = run_parser.add_mutually_exclusive_group()
    run_language_selection.add_argument('-j', '--java', dest='language_selection', action='store_const',
                                        const='JAVA', help='Use java')
    run_language_selection.add_argument('-p', '--python', dest='language_selection', action='store_const',
                                        const='PYTHON', help='Use python')

    args = argument_parser.parse_args()

    # language detection
    if 'language_selection' in vars(args) \
            and args.language_selection is not None:
        language = args.language_selection
    else:
        language = DEFAULT_LANGUAGE

    # handle commands
    match args.directive:
        case 'clean':
            clean_build_directory(no_confirm=args.clean_no_confirm)
        case 'compile':
            success = True
            match language:
                case 'JAVA':
                    success = compile_java()
            if success:
                print('Compiled successfully.')
            else:
                print('Failed to compile!')
        case 'run':
            year = truncate_year(args.year)
            day = args.day
            # find input file
            if args.input_file is not None:
                input_file = args.input_file
            else:
                input_file = get_input_path(year, day, args.use_test_input)
            match language:
                case 'JAVA': run_java(year, day, input_file)
                case 'PYTHON': run_python(year, day, input_file)
                case _: print(f'Invalid language {language}!')
        case 'create':
            year = truncate_year(args.year)
            day = args.day

            get_input_path(year, day, False).touch()
            get_input_path(year, day, True).touch()
            # templating
            match language:
                case 'JAVA': java_template(year, day)
        case _:
            print('Invalid directive!')
            sys.exit(1)


if __name__ == '__main__':
    main()
